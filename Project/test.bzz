# Use Shift + Click to select a robot
# When a robot is selected, its variables appear in this editor

# Use Ctrl + Click (Cmd + Click on Mac) to move a selected robot to a different location

# Put your global variables here



# This function is executed every time you press the 'execute' button
function init() {
	a = 1
	b = 1
   # put your code here
	s = swarm.create(0)
	s.join()
	goal = {.x = -1.0, .y = -0.5}
	posx = pose.position.x
	posy = pose.position.y
	set_leds(255,0,0) # red
	V = 12.0
	vl = 12.0
	vr = 12.0
	togo_x = goal.x - posx
  togo_y = goal.y - posy
	togo_mag = math.sqrt(togo_x^2 + togo_y^2)
	goal_t = math.atan(togo_y,togo_x)
	togo_t = (pose.orientation.yaw - math.atan(togo_y,togo_x))
	if (togo_t > 3.1416) {
		togo_t = togo_t - 6.2832}
	else if (togo_t < -3.1416) {
		togo_t = togo_t + 6.2832}
	togo_t_thresh = 0.05
	count = 5
	leader = {.x = 0.0, .y = 0.0}
	recruited = {.0 = 0,.1 = 1,.2 = 2, .3 = 3}
	
}

# This function is executed at each time step
# It must contain the logic of your controller
function step() {
	n = 0
	if(s.in()) {
		neighbors.broadcast("recruited",1)}
	neighbors.listen("recruited",
		function(vid,value,rid) {
			if (value == 1) {
				#log("no.",rid," recruited")
			}
			n_count()}
	)
	if (n > 1) {
		log("Swarm size satisfactory")
	}
	foreach(recruited,function(key,value) {
		log("recruited",value)})

}

function n_count() {
	n = n + 1
}

function table_print(t) {
	log("TABLE PRINT")
  foreach(t, function(key, value) {
      log(key, " -> ", value)
    })
}
function robotvel_to_wheelvel(Xdot,Ydot) {
	D = 0.0704  #khepera iv robot radius in meters
	L = 0.1054  #khepera iv robot distance between wheels in meters
	R = 2*D
	var th = pose.orientation.yaw
	var a = (math.cos(th)/2) + (D*math.sin(th)/L)
	var b = (math.cos(th)/2) - (D*math.sin(th)/L)
	var c = (math.sin(th)/2) - (D*math.cos(th)/L)
	var d = (math.sin(th)/2) + (D*math.cos(th)/L)
	vL = (b*Ydot)/(b*c - a*d) - (d*Xdot)/(b*c - a*d)
	vR = (c*Xdot)/(b*c - a*d) - (a*Ydot)/(b*c - a*d)
	var v = {}
	v = { .l = vL, .r = vR }
	return v
}
function random_walk() {
  dirx = 12.0
 	diry = math.rng.uniform(7.0,17.0)
	set_wheels(dirx,diry)
}

function follow() {
	if (togo_t < togo_t_thresh*-1.0) {
		set_wheels(10.0,15.0)}
	else if (togo_t > togo_t_thresh) {
		set_wheels(15.0,10.0)}
	else if (togo_mag > 0.2) {
		set_wheels(15.0,15.0)}
	else {
		set_wheels(0.0,0.0)}
	togo_t = (pose.orientation.yaw - math.atan(togo_y,togo_x))
	if (togo_t > 3.1416) {
		togo_t = togo_t - 6.2832}
	else if (togo_t < -3.1416) {
		togo_t = togo_t + 6.2832}
}
function get2() {
	neighbors.listen("mypose",
		function(vid,value,rid) {
			log("no. ",id," heard x: ",value.x," y: ",value.y)
		}
	)
	if (togo_t < togo_t_thresh*-1.0) {
		set_wheels(5.0,10.0)}
	else if (togo_t > togo_t_thresh) {
		set_wheels(10.0,5.0)}
	else if (togo_mag > 0.2) {
		set_wheels(10.0,10.0)}
	else {
		set_wheels(0.0,0.0)}
	togo_t = (pose.orientation.yaw - math.atan(togo_y,togo_x))
	if (togo_t > 3.1416) {
		togo_t = togo_t - 6.2832}
	else if (togo_t < -3.1416) {
		togo_t = togo_t + 6.2832}
	posx = pose.position.x
	posy = pose.position.y
	togo_x = goal.x - posx
  togo_y = goal.y - posy
	togo_mag = math.sqrt(togo_x^2 + togo_y^2)

}
function get() {
	neighbors.foreach(
		function(rid, data) {
			neighbors.listen("leader",
				function(vid,value,rid_b) {
					if (value == 0) {
						l_dist = data.distance
						log("no. ",id," is ",l_dist,"cm from ",rid_b)
					}
				}
			)
		}
	)
}

# This function is executed every time you press the 'reset'
# button in the GUI. It is supposed to restore the state
# of the controller to whatever it was right after init() was
# called. The state of sensors and actuators is reset
# automatically by ARGoS.
function reset() {
   # put your code here
}



# This function is executed only once, when the robot is removed
# from the simulation
function destroy() {
   # put your code here
}

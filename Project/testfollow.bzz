# Use Shift + Click to select a robot
# When a robot is selected, its variables appear in this editor

# Use Ctrl + Click (Cmd + Click on Mac) to move a selected robot to a different location



# Put your global variables here



# This function is executed every time you press the 'execute' button
function init() {
	s = swarm.create(1)
  rand_count = 0
	r_count = 0
  found = 0
	turn_timer = 40
	fwd = 0
	fwd_timer = 50
	init_turn = 0
	turnaway = 0
	init_obj = {.x = 0.3, .y = -1.0}
	goal = {.x = -1.5, .y = -0.5}
	leader = {.x = 1000.0, .y = 1000.0}
	state = 0
	posx = pose.position.x
	posy = pose.position.y
	set_leds(255,0,0) # red
	m = 10
	vl = 12.0
	vr = 12.0
	togo_x = goal.x - posx
  togo_y = goal.y - posy
	goal_t = math.atan(togo_y,togo_x)
	togo_t = (pose.orientation.yaw - math.atan(togo_y,togo_x))
	if (togo_t > 3.1416) {
		togo_t = togo_t - 6.2832}
	else if (togo_t < -3.1416) {
		togo_t = togo_t + 6.2832}
	flag = 0
	priority = 1
	r_c = 0
	recruit_dist = 0.6
	recruited = {.0 = 0,.1 = 0,.2 = 0, .3 = 0}
	set_wheels(vl,vr)
   # put your code here
}



# This function is executed at each time step
# It must contain the logic of your controller
function step() {

	if (state > 0) {
		neighbors.broadcast("recruited",1)}
	if (state == 0) {
		ob_avoid()
		distx = init_obj.x - posx
		disty = init_obj.y - posy
		dist_mag = math.sqrt((distx^2 + disty^2))
		if ((dist_mag < 0.33) and (state == 0)) {
			state = 1
			log("no.",id,"enters state 1")
			set_leds(0,0,255) # blue
			s.join()
			recruited[id] = 1
			make_space = 0
			neighbors.broadcast("mypose1",pose.position)
		}
	}
	if (state == 1) {
		sensed = 0
		left = 0
		foreach(proximity, function(key, value) {
			if (value.value > 0) {
				sensed = sensed + 1
				if ((value.angle > 0.786) and (value.angle < 2.35)) {
					left = 1}
			}
		})
		if ((sensed == 1) and (left == 1)) {
			set_wheels(8.0,8.0)}
		else if ((left == 0) and (sensed > 0)){
			set_wheels(-4.0,4.0)}
		else if (sensed > 1) {	
			set_wheels(8.0,6.0)}
		else if (sensed == 0) {
			togo_x = init_obj.x - posx
			togo_y = init_obj.y - posy
			togo_mag = math.sqrt(togo_x^2 + togo_y^2)
			togo_t = (pose.orientation.yaw - math.atan(togo_y,togo_x))
			if (togo_t > 3.1416) {
				togo_t = togo_t - 6.2832}
			else if (togo_t < -3.1416) {
				togo_t = togo_t + 6.2832}
			follow(togo_x,togo_y,togo_t,togo_mag)}
	}
	posx = pose.position.x
	posy = pose.position.y
   # put your code here
}

function follow(tg_x,tg_y,tg_t,tg_mag) {
	tg_t_thresh = 0.05
	if (tg_t < tg_t_thresh*-1.0) {
		set_wheels(10.0,15.0)}
	else if (tg_t > tg_t_thresh) {
		set_wheels(15.0,10.0)}
	else if (tg_mag > 0.2) {
		set_wheels(15.0,15.0)}
	else {
		set_wheels(0.0,0.0)}
	tg_t = (pose.orientation.yaw - math.atan(tg_y,tg_x))
}	

function ob_avoid() {
	dvl = 4.0
	dvr = 4.0
	flag = 0

	foreach(proximity, function(key, value) {
		if (value.value > 0) {
			flag = flag + 1
			if (value.angle == 0) {
				vr = -6.0
				vl = 6.0
				set_wheels(vl,vr)
			}
			else if ((value.angle > 3) and (value.angle < 3.15)) {
				vl = 8.0
				vr = 8.0
			}
			else {
				vl = vl + dvl*math.sin(value.angle)
				vr = vr - 1.1*dvr*math.sin(value.angle)
				set_wheels(vl,vr)}
		}

		else if (flag == 0) {
			if (rand_count%5 == 0) {
 		 		vl = 12.0
 				vr = math.rng.uniform(7.0,17.0)
				set_wheels(vl,vr)}
			rand_count = rand_count + 1

		}
		else if (flag > 3) {
			vl = 7.0
			vr = -6.0
			set_wheels(vl,vr)
		}
	})
}

# This function is executed every time you press the 'reset'
# button in the GUI. It is supposed to restore the state
# of the controller to whatever it was right after init() was
# called. The state of sensors and actuators is reset
# automatically by ARGoS.
function reset() {
   # put your code here
}



# This function is executed only once, when the robot is removed
# from the simulation
function destroy() {
   # put your code here
}

#
# In the ARGoS window, you can move the camera with the following commands:
#
# - Translation: W A S D Q E keys, right-click + drag
# - Rotation: left-click + drag
#
# Selection: shift-click on the robot
# Remove selection: shift-click elsewhere
#
# Bug: selection is finnicky in the top-down view (Camera 1).
# Solution: switch to another camera and it'll work.
#

#
# Compiling and running the code
#
# - In the ARGoS window: Pause the simulation (if it's not paused already)
# - In the editor: do what you need, save, press the "Execute" button
# - In the ARGoS window: Press the "Play", "Step", or "Fast Forward" buttons
#

#include "main.bzz"

# This function is executed once at init time
function init() {
    # x = "hello world"
    # print on the argos logger
    # log("INFO: x = ", x)

    # set all LEDs to red
    set_leds(255, 0, 0)
    # initialize synchronization variables
    T = 100                         # threshold for flashing
    c = math.rng.uniform(0,T)       # random starting value between 0 and T
    state = 0                       # starting in a not-flashing state
    k = 0.5                        # flashing likelihood scale factor
}

# This function is executed at each time step
# The main loop is controller by ARGoS
function step() {
    # obstacle avoidance (bug0)
    avoiding = 0
    foreach(proximity, function(key, value) {
            # value.value returns 0 if we are farther than 12 cm
            if( (key == 7 or key == 0 or key == 1) and value.value != 0)
                avoiding = 1
                #log(id, " proximity[", value.angle, "] = ", value.value)
                set_wheels(3.0,0.0)
    })
    if( avoiding == 0 )
        set_wheels(4.0,4.0)

}

# This function is executed when you press the reset button
function reset() {
    #t = {}
    #t = {.x = 3}
    #log(id, " proximity: ", proximity[0].value)
    #log("t.x=",t.x)

    #size_t = table_print(t)
    #log("table size: ", size_t)

}

function table_print(t) {
    foreach(t, function(key, value) {
        #log(key, " -> ", value)
    })
    return size(t) 
}


# This function is executed once when you close the simulator
function destroy() {
}


# Reinforce parameter
# Defined in slide 11
# Chosen as in slide 17
XSI = 10
# Forget parameter
# Defined in slide 11
# Chosen as in slide 17
PHI = 1
# Spontaneous switching
# Defined in slide 15
# Chosen as in slide 17
P = 0.2
# Number of tasks: if you change this, you must also change the corresponding
# parameter in the .argos file, line 107!
TASKS = 2

threshold_min = 0
threshold_max = 1000
N = 5
alpha = 3
delta = 1

DT = 10

#
# Executed once at init time
#
function init() {
  reset()
}

#
# Executed for each step
#
function step() {
  # Perform probabilistic switching explained in the slides
  # Use the math.rng library
  # See https://the.swarming.buzz/wiki/doku.php?id=buzz_manual#the_mathrng_library

  # The stimulus is calculated by the ARGoS loop functions
  # ARGoS "magically" inserts the variable 'stimulus' in the script of each robot
  # It is defined as a table indexed by the number of the task, for example:
  # stimulus = {
  #   .0 = stimulus for task 0 (some float value),
  #   .1 = stimulus for task 1 (some float value)
  # }
  # For details, check the file threshold_model.cpp
  # Stimuli are initialized at lines 112-116
  # Stimuli are updated at lines 150-153
  # The magic that writes the stimuli into the scripts is at 75-96
  # Feel free to read the code and play with it!
  
  # 'task' is expected to be an integer variable, make sure it is at all times!
  # See lines 9-70 to check how the loop functions fetch it from the Buzz scripts
  
  random_number = math.rng.uniform(1.0)
  if( task == 1 and T_2 > random_number ) {
    task = 0
    set_leds(255,0,0)
    if( id == 0 )
      log("agent 0 switched to task 0: _2T (", T_2, ") > random_number(", random_number, ")")
  }
  else if( task == 0 and T_1 > random_number ) {
    task = 1
    set_leds(0,255,0)
    if( id == 0 )
      log("agent 0 switched to task 1: T_1 (", T_1, ") > random_number(", random_number, ")")
  }
  # The 'threshold' table is read by the ARGoS loop functions, so make sure not to use
  # a different variable name
  # See lines 9-70 to check how the loop functions fetch it from the Buzz scripts
  
  if( id == 0 ){
    log("before threshold0 = ", threshold[0], ", x_2: ", x_2)
    log("before threshold1 = ", threshold[1], ", x_1: ", x_1)
  }
  threshold[0] = threshold[0] + ((1-x_2)*PHI-(x_2)*XSI)*(bound(threshold[0]-threshold_min)*bound(threshold_max-threshold[0]))
  threshold[1] = threshold[1] + ((1-x_1)*PHI-(x_1)*XSI)*(bound(threshold[1]-threshold_min)*bound(threshold_max-threshold[1]))
  if( id == 0 ){
    log("after threshold0 = ", threshold[0])
    log("after threshold1 = ", threshold[1])
  }

  # for each time in DT, figure out what each agent is doing, whether its doing x_1 or x_2 or staying idle (x_0)
  dx_2 = T_2*(1-(x_2+x_1)) - P*x_2 + math.rng.gaussian(0.1)
  dx_1 = T_1*(1-(x_2+x_1)) - P*x_1 + math.rng.gaussian(0.1)
  x_2 = x_2 + dx_2
  x_1 = x_1 + dx_1
  x_0 = 1-(x_1+x_2)
  
  T_2 = (stimulus[0]^2) / ((stimulus[0]^2)+(threshold[0]^2))
  T_1 = (stimulus[1]^2) / ((stimulus[1]^2)+(threshold[1]^2))

  # Some debug output just for fun
  debug_output()
}

function bound(threshold_diff) {
  if( threshold_diff >= 0 )
    return 1.0
  else
    return 0.0
}

#
# Executed once upon resetting
#
function reset() {
  # Pick a default task
  task = 0 # must be an integer between 0 and TASKS-1!
  T_2 = 0.5
  T_1 = 0.5
  x_2 = 0.5
  x_1 = 0.5
  d_x2 = 0.0
  d_x1 = 0.0
  # Pick initial thresholds for the tasks
  threshold = {}
  threshold[0] = 500.0 # must be a float between 0.0 and 1000.0!
  threshold[1] = 500.0 # must be a float between 0.0 and 1000.0!
  # Debug output
  debug_output()
}

#
# Executed once upon closing ARGoS
#
function destroy() {
  # Nothing to do
}

#
# Helper function
#
function debug_output() {
  # Examples of possible debug output
  
  # Debug message written on top of robot
  # See: https://the.swarming.buzz/wiki/doku.php?id=buzz_argos
  # Debug message written in the log
  if( id == 0 )
    log("T: ", T, ", T_1: ", T_1)
  #log("R", id, ": t=", task, "; th0=", threshold[0], "; th1=", threshold[1])
  #log(" dx_2: ", dx_2, "; x_2: ", x_2)
  #log(" dx_1: ", dx_1, "; x_1: ", x_1)
  #log(" d_s: ", d_s, "; s: ", s, "; T: ", T)
}
